{
  "name": "NIFI",
  "label": "NiFi",
  "description": "Apache's NiFi service. <span class=\"error\">Requires Java 8.</span>",

  "version": "0.1.0",

  "compatibility" : {
    "cdhVersion" : {
      "min": "5.7.0",
      "max": "5"
    }
  },

  "runAs": {
    "user": "nifi",
    "group": "nifi",
    "principal": "nifi"
  },

  "maxInstances": 1,

  "icon": "images/icon.png",

  "parcel": {
    "repoUrl" : "https://github.com/nomr/nifi-parcel/releases/download/v1.4.0+nifi0.1.2",
    "requiredTags": [
      "nifi"
    ]
  },

  "serviceDependencies": [
    {
      "name": "ZOOKEEPER",
      "required": "true"
    }
  ],

  "inExpressWizard" : false,

  "parameters": [
    {
      "name": "java_home",
      "label": "Java 8 Home",
      "description": "Path to Java 8",
      "configName": "java.home",
      "required": true,
      "configurableInWizard": true,
      "default": "/usr/java/jdk1.8.0_121",
      "type": "path",
      "pathType": "serviceSpecific"
    },
    {
      "name": "nifi_home",
      "label": "NiFi Home directory",
      "description": "NiFi's service instance home directory",
      "required": true,
      "configurableInWizard": true,
      "default": "/var/run/nifi",
      "type": "path",
      "pathType": "localDataDir",
      "mode": "0750"
    }
  ],

  "roles": [
    {
      "name": "NIFI_SERVER",
      "label": "NiFi Server",
      "pluralLabel": "NiFi Servers",
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [ "run" ],
        "environmentVariables" : {
          "JAVA_HOME": "${java_home}",
          "NIFI_HOME": "${nifi_home}",
          "NIFI_PID_DIR": "${nifi_home}",
          "NIFI_LOG_DIR": "/var/log/nifi"
        }
      },
      "stopRunner": {
        "program": "scripts/control.sh",
        "args": [ "stop" ],
        "environmentVariables" : {
          "JAVA_HOME": "${java_home}",
          "NIFI_HOME": "${nifi_home}",
          "NIFI_PID_DIR": "${nifi_home}",
          "NIFI_LOG_DIR": "/var/log/nifi"
        }
      },
      "topology": {
        "minInstances": "1",
        "softMinInstances": "3"
      },
      "logging": {
        "dir": "/var/log/nifi",
        "filename": "nifi.log",
        "modifiable": true,
        "loggingType": "logback",
        "additionalConfigs": [
          { "key": "1", "value": "<contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\"><resetJUL>true</resetJUL></contextListener>"},
          { "key": "1", "value": "<logger name=\"org.apache.nifi\" level=\"INFO\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.processors\" level=\"WARN\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.processors.standard.LogAttribute\" level=\"INFO\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.processors.standard.LogMessage\" level=\"INFO\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.controller.repository.StandardProcessSession\" level=\"WARN\" />" },

          { "key": "1", "value": "<logger name=\"org.apache.zookeeper.ClientCnxn\" level=\"ERROR\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.zookeeper.server.NIOServerCnxn\" level=\"ERROR\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.zookeeper.server.NIOServerCnxnFactory\" level=\"ERROR\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.zookeeper.server.quorum\" level=\"ERROR\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.zookeeper.ZooKeeper\" level=\"ERROR\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.zookeeper.server.PrepRequestProcessor\" level=\"ERROR\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.calcite.runtime.CalciteException\" level=\"OFF\" />" },

          { "key": "1", "value": "<logger name=\"org.apache.curator.framework.recipes.leader.LeaderSelector\" level=\"OFF\" />" },
          { "key": "1", "value": "<logger name=\"org.apache.curator.ConnectionState\" level=\"OFF\" />" },

          { "key": "1", "value": "<logger name=\"org.apache.nifi.cluster\" level=\"INFO\"/>" },

          { "key": "1", "value": "<logger name=\"org.apache.nifi.server.JettyServer\" level=\"INFO\"/>" },

          { "key": "1", "value": "<logger name=\"org.eclipse.jetty\" level=\"INFO\"/>" },

          { "key": "1", "value": "<logger name=\"com.sun.jersey.spi.container.servlet.WebComponent\" level=\"ERROR\"/>" },
          { "key": "1", "value": "<logger name=\"com.sun.jersey.spi.spring\" level=\"ERROR\"/>" },
          { "key": "1", "value": "<logger name=\"org.springframework\" level=\"ERROR\"/>" },

          { "key": "1", "value": "<logger name=\"com.sun.jersey.spi.inject.Errors\" level=\"ERROR\"/>" },

          { "key": "1", "value": "<logger name=\"org.apache.nifi.web.security\" level=\"INFO\" additivity=\"false\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.web.api.config\" level=\"INFO\" additivity=\"false\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.authorization\" level=\"INFO\" additivity=\"false\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.cluster.authorization\" level=\"INFO\" additivity=\"false\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.web.filter.RequestLogger\" level=\"INFO\" additivity=\"false\"/>" },

          { "key": "1", "value": "<logger name=\"org.apache.nifi.bootstrap\" level=\"INFO\" additivity=\"false\"/>" },
          { "key": "1", "value": "<logger name=\"org.apache.nifi.bootstrap.Command\" level=\"INFO\" additivity=\"false\"/>" },

          { "key": "1", "value": "<logger name=\"org.apache.nifi.StdOut\" level=\"INFO\" additivity=\"false\"/>" },

          { "key": "1", "value": "<logger name=\"org.apache.nifi.StdErr\" level=\"ERROR\" additivity=\"false\"/>" }
        ]
      },
      "configWriter": {
        "generators": [
          {
            "filename": "authorizers-access-policy-provider-file.hadoop_xml",
            "configFormat": "hadoop_xml",
            "includedParams": [
              "authorizers_access_policy_file_user_group_provider",
              "authorizers_access_policy_file_initial_admin_identity"
            ],
            "additionalConfigs": [
              {
                "key": "identifier",
                "value": "file-access-policy-provider"
              },
              {
                "key": "class",
                "value": "org.apache.nifi.authorization.FileAccessPolicyProvider"
              },
              {
                "key": "Users File",
                "value": "${nifi_home}/authorizations.xml"
              },
              {
                "key": "cdh.authorizers.type",
                "value": "accessPolicyProvider"
              }
            ]
          },
          {
            "filename": "authorizers-authorizer-managed.hadoop_xml",
            "configFormat": "hadoop_xml",
            "includedParams": [
              "authorizers_authorizer_managed_access_policy_provider"
            ],
            "additionalConfigs": [
              {
                "key": "identifier",
                "value": "managed-authorizer"
              },
              {
                "key": "class",
                "value": "org.apache.nifi.authorization.StandardManagedAuthorizer"
              },
              {
                "key": "cdh.authorizers.type",
                "value": "authorizer"
              }
            ]
          },
          {
            "filename": "authorizers-user-group-provider-file.hadoop_xml",
            "configFormat": "hadoop_xml",
            "includedParams": [
              "authorizers_user_group_provider_file_initial_identity"
            ],
            "additionalConfigs": [
              {
                "key": "identifier",
                "value": "file-user-group-provider"
              },
              {
                "key": "class",
                "value": "org.apache.nifi.authorization.FileUserGroupProvider"
              },
              {
                "key": "Users File",
                "value": "${nifi_home}/users.xml"
              },
              {
                "key": "cdh.authorizers.type",
                "value": "userGroupProvider"
              }
            ]
          },
          {
            "filename": "bootstrap.conf",
            "configFormat": "properties",
            "includedParams": [
              "bs_graceful_shutdown_seconds"
            ],
            "additionalConfigs": [
              {
                "key": "java",
                "value": "${java_home}/bin/java"
              },
              {
                "key": "notification.services.file",
                "value": "bootstrap-notification-services.xml"
              },
              {
                "key": "notification.max.attempts",
                "value": "5"
              },
              {
                "key": "run.as",
                "value": ""
              },
              {
                "key": "nifi.bootstrap.sensitive.key",
                "value": ""
              }
            ]
          },
          {
            "filename": "login-identity-providers-kerberos.hadoop_xml",
            "configFormat": "hadoop_xml",
            "includedParams": [
              "login_identity_providers_kerberos_default_realm"
            ],
            "additionalConfigs": [
              {
                "key": "identifier",
                "value": "kerberos-provider"
              },
              {
                "key": "class",
                "value": "org.apache.nifi.kerberos.KerberosProvider"
              },
              {
                "key": "Authentication Expiration",
                "value": "${login_identity_providers_kerberos_authentication_expiration} hours"
              },
              {
                "key": "cdh.login.identity.providers.type",
                "value": "provider"
              }
            ]
          },
          {
            "filename": "nifi-future.properties",
            "configFormat": "properties",
            "includedParams": [
              "nifi_flow_configuration_archive_enabled",
              "nifi_flow_configuration_archive_max_count",
              "nifi_flowcontroller_auto_resume_state",
              "nifi_ui_banner_text",
              "nifi_database_directory",
              "nifi_database_h2_url",
              "nifi_flowfile_repository_implementation",
              "nifi_flowfile_repository_directory",
              "nifi_flowfile_repository_partitions",
              "nifi_flowfile_repository_always_sync",
              "nifi_swap_queue_threshold",
              "nifi_swap_in_threads",
              "nifi_swap_out_threads",
              "nifi_components_status_repository_buffer_size",
              "nifi_remote_input_host",
              "nifi_remote_input_secure",
              "nifi_remote_input_socket_port",
              "nifi_remote_input_http_enabled",
              "nifi_security_user_authorizer",
              "nifi_security_user_login_identity_provider"
            ],
            "additionalConfigs": [
              {
                "key": "nifi.flow.configuration.file",
                "value": "${nifi_home}/flow.xml.gz"
              },
              {
                "key": "nifi.flow.configuration.archive.dir",
                "value": "${nifi_home}/archive"
              },
              {
                "key": "nifi.flow.configuration.archive.max.time",
                "value": "${nifi_flow_configuration_archive_max_time} hours"
              },
              {
                "key": "nifi.flow.configuration.archive.max.storage",
                "value": "${nifi_flow_configuration_archive_max_storage} MB"
              },
              {
                "key": "nifi.flowcontroller.graceful.shutdown.period",
                "value": "${nifi_flowcontroller_graceful_shutdown_period} sec"
              },
              {
                "key": "nifi.flowservice.writedelay.interval",
                "value": "${nifi_flowservice_writedelay_interval} ms"
              },
              {
                "key": "nifi.administrative.yield.duration",
                "value": "${nifi_administrative_yield_duration} sec"
              },
              {
                "key": "nifi.bored.yield.duration",
                "value": "${nifi_bored_yield_duration} millis"
              },
              {
                "key": "nifi.authorizer.configuration.file",
                "value": "./authorizers.xml"
              },
              {
                "key": "nifi.login.identity.provider.configuration.file",
                "value": "./login-identity-providers.xml"
              },
              {
                "key": "nifi.templates.directory",
                "value": "${nifi_home}/templates"
              },
              {
                "key": "nifi.ui.autorefresh.interval",
                "value": "${nifi_ui_autorefresh_interval} sec"
              },
              {
                "key": "nifi.nar.library.directory",
                "value": "@@CDH_NIFI_HOME@@/lib"
              },
              {
                "key": "nifi.nar.working.directory",
                "value": "${nifi_home}/work/nar"
              },
              {
                "key": "nifi.documentation.working.directory",
                "value": "${nifi_home}/work/docs/components"
              },
              {
                "key": "nifi.state.management.configuration.file",
                "value": "./state-management.xml"
              },
              {
                "key": "nifi.state.management.provider.local",
                "value": "local-provider"
              },
              {
                "key": "nifi.state.management.provider.cluster",
                "value": "zk-provider"
              },
              {
                "key": "nifi.state.management.embedded.zookeeper.start",
                "value": "false"
              },
              {
                "key": "nifi.flowfile.repository.checkpoint.interval",
                "value": "${nifi_flowfile_repository_checkpoint_interval} mins"
              },
              {
                "key": "nifi.swap.manager.implementation",
                "value": "org.apache.nifi.controller.FileSystemSwapManager"
              },
              {
                "key": "nifi.swap.in.period",
                "value": "${nifi_swap_in_period} sec"
              },
              {
                "key": "nifi.swap.out.period",
                "value": "${nifi_swap_out_period} sec"
              },
              {
                "key": "nifi.components.status.repository.implementation",
                "value": "org.apache.nifi.controller.status.history.VolatileComponentStatusRepository"
              },
              {
                "key": "nifi.components.status.snapshot.frequency",
                "value": "${nifi_components_status_snapshot_frequency} min"
              },
              {
                "key": "nifi.remote.input.http.transaction.ttl",
                "value": "${nifi_remote_input_http_transaction_ttl} sec"
              }
	    ]
          },
          {
            "filename": "state-management-local-provider.hadoop_xml",
            "configFormat": "hadoop_xml",
            "includedParams": [
              "state_management_local_provider_directory",
              "state_management_local_provider_always_sync",
              "state_management_local_provider_partitions"
            ],
            "additionalConfigs": [
              {
                "key": "id",
                "value": "local-provider"
              },
              {
                "key": "class",
                "value": "org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider"
              },
              {
                "key": "Checkpoint Interval",
                "value": "${state_management_local_provider_checkpoint_interval} mins"
              },
              {
                "key": "cdh.stateManagement.provider.type",
                "value": "local-provider"
              }
            ]
          },
          {
            "filename": "state-management-zk-provider.hadoop_xml",
            "configFormat": "hadoop_xml",
            "includedParams": [
              "state_management_zk_provider_root_node",
              "state_management_zk_provider_access_control"
            ],
            "additionalConfigs": [
              {
                "key": "id",
                "value": "zk-provider"
              },
              {
                "key": "class",
                "value": "org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider"
              },
              {
                "key": "Session Timeout",
                "value": "${state_management_zk_provider_session_timeout} seconds"
              },
              {
                "key": "cdh.stateManagement.provider.type",
                "value": "cluster-provider"
              }
            ]
          }
        ],
        "auxConfigGenerators": [
          {
            "filename": "authorizers-access-policy-provider-safety-valve.xml",
            "sourceFilename": "aux/authorizers-access-policy-provider-safety-valve.xml"
          },
          {
            "filename": "authorizers-authorizer-safety-valve.xml",
            "sourceFilename": "aux/authorizers-authorizer-safety-valve.xml"
          },
          {
            "filename": "authorizers-user-group-provider-safety-valve.xml",
            "sourceFilename": "aux/authorizers-user-group-provider-safety-valve.xml"
          },
          {
            "filename": "bootstrap-notification-services.xml",
            "sourceFilename": "aux/bootstrap-notification-services.safety-valve-xml"
          },
          {
            "filename": "login-identity-providers-safety-valve.xml",
            "sourceFilename": "aux/login-identity-providers-safety-valve.xml"
          },
          {
            "filename": "state-management-safety-valve.xml",
            "sourceFilename": "aux/state-management-safety-valve.xml"
          }
        ]
      },
      "parameters": [
        {
          "name": "authorizers_access_policy_file_user_group_provider",
          "label": "Authorizers File Access Policy Provider User Group Provider", 
          "description": "The identifier for an User Group Provider defined above that will be used to access users and groups for use in the managed access policies.",
          "configName": "User Group Provider",
          "required": true,
          "type": "string",
          "default": "file-user-group-provider"
        },
        {
          "name": "authorizers_access_policy_file_initial_admin_identity",
          "label": "Authorizers File Access Policy Provider Initial Admin Identity", 
          "description": "The identity of an initial admin user that will be granted access to the UI and given the ability to create additional users, groups, and policies. The value of this property could be a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified. NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity, so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.",
          "configName": "Initial Admin Identity",
          "required": true,
          "type": "string"
        },
        {
          "name": "authorizers_access_policy_file_node_identity_1",
          "label": "Authorizers File Access Policy Provider Node Identity 1", 
          "description": "The identity of a NiFi cluster node. When clustered, a property for each node should be defined, so that every node knows about every other node. If not clustered these properties can be ignored. The name of each property must be unique, for example for a three node cluster: 'Node Identity A', 'Node Identity B', 'Node Identity C' or 'Node Identity 1', 'Node Identity 2', 'Node Identity 3' NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities, so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found in the configured User Group Provider.",
          "configName": "Node Identity 1",
          "type": "string"
        },
        {
          "name": "authorizers_authorizer_managed_access_policy_provider",
          "label": "Authorizers Managed Authorizer Access Policy Provider", 
          "description": "The identifier for an Access Policy Provider.",
          "configName": "Access Policy Provider",
          "required": true,
          "type": "string",
          "default": "file-access-policy-provider"
        },
        {
          "name": "authorizers_user_group_provider_file_initial_identity",
          "label": "Authorizers File User Group Provider Initial Identity 1",
          "description": "The <bd>umapped</bd> identity of a users and systems to seed the Users File. Use the safety-valve to add additional ones (key: Initial Identity [unique id], value: )",
          "configName": "Initial User Identity 1",
          "required": "true",
          "type": "string"
        },
        {
          "name": "bs_graceful_shutdown_seconds",
          "label": "Graceful Shutdown (in seconds)",
          "description": "How long to wait after telling NiFi to shutdown before explicitly killing the Process",
          "configName": "graceful.shutdown.seconds",
          "required": true,
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "softMin": 20,
          "default": 20
        },
        {
          "name": "login_identity_providers_kerberos_default_realm",
          "label": "Login Kerberos Identity Provider Default Realm",
          "description": "Default realm to provide when user enters incomplete user principal.",
          "configName": "Default Realm",
          "required": false,
          "type": "string",
          "default": "HADOOP.APACHE.ORG"
        },
        {
          "name": "login_identity_providers_kerberos_authentication_expiration",
          "label": "Login Kerberos Identity Provider Authentication Expiration",
          "description": "The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.",
          "required": false,
          "type": "long",
          "unit": "hours",
          "min": 1,
          "default": "12"
        },
        {
          "name": "nifi_flow_configuration_archive_enabled",
          "label": "Flow Configuration Archive (on/off)",
          "description": "Specifies whether NiFi creates a backup copy of the flow automatically when the flow is updated.",
          "configName": "nifi.flow.configuration.archive.enabled",
          "required": true,
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "nifi_flow_configuration_archive_max_time",
          "label": "Flow Configuration Archive (Max Time)",
          "description": "The lifespan of archived flow.xml files. NiFi will delete expired archive files when it updates flow.xml if this property is specified. Expiration is determined based on current system time and the last modified timestamp of an archived flow.xml.",
          "required": true,
          "type": "long",
          "unit": "hours",
          "min": 1,
          "default": 720
        },
        {
          "name": "nifi_flow_configuration_archive_max_storage",
          "label": "Flow Configuration Archive (Max Storage)",
          "description": "The total data size allowed for the archived flow.xml files. NiFi will delete the oldest archive files until the total archived file size becomes less than this configuration value, if this property is specified. ",
          "required": true,
          "type": "long",
          "unit": "megabytes",
          "min": 1,
          "default": 500
        },
        {
          "name": "nifi_flow_configuration_archive_max_count",
          "label": "Flow Configuration Archive (Max Count)",
          "description": "The number of archive files allowed. NiFi will delete the oldest archive files so that only N latest archives can be kept, if this property is specified." ,
          "configname": "nifi.flow.configuration.archive.max.time",
          "required": false,
          "type": "long",
          "min": 1
        },
        {
          "name": "nifi_flowcontroller_graceful_shutdown_period",
          "label": "Flow Controller Graceful Shutdown Period",
          "description": "Indicates the shutdown period.",
          "required": true,
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "default": 10
        },
        {
          "name": "nifi_flowcontroller_auto_resume_state",
          "label": "Flow Controller Auto Resume State (on/off)",
          "description": "Indicates whether -upon restart- the components on the NiFi graph should return to their last state.",
          "configName": "nifi.flowcontroller.autoResumeState",
          "required": true,
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "nifi_flowservice_writedelay_interval",
          "label": "Flow Service Write Delay Interval",
          "description": "When many changes are made to the flow.xml, this property specifies how long to wait before writing out the changes, so as to batch the changes into a single write.",
          "required": true,
          "type": "long",
          "unit": "milliseconds",
          "min": 1,
          "default": 500
        },
        {
          "name": "nifi_administrative_yield_duration",
          "label": "Administrative Yield Duration",
          "description": "If a component allows an unexpected exception to escape, it is considered a bug. As a result, the framework will pause (or administratively yield) the component for this amount of time. This is done so that the component does not use up massive amounts of system resources, since it is known to have problems in the existing state.",
          "required": true,
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "default": 30
        },
        {
          "name": "nifi_bored_yield_duration",
          "label": "Bored Yield Duration",
          "description": "When a component has no work to do (i.e., is \"bored\"), this is the amount of time it will wait before checking to see if it has new data to work on. This way, it does not use up CPU resources by checking for new work too often. When setting this property, be aware that it could add extra latency for components that do not constantly have work to do, as once they go into this \"bored\" state, they will wait this amount of time before checking for more work.",
          "required": true,
          "type": "long",
          "unit": "milliseconds",
          "min": 1,
          "default": 10
        },
        {
          "name": "nifi_ui_banner_text",
          "label": "UI Banner Text",
          "description": "This is banner text that may be configured to display at the top of the User Interface.",
          "configName": "nifi.ui.banner.text",
          "required": false,
          "type": "string"
        },
        {
          "name": "nifi_ui_autorefresh_interval",
          "label": "UI Autorefresh Interval",
          "description": "The interval at which the User Interface auto-refreshes.",
          "required": true,
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "default": 30
        },
        {
          "name": "nifi_database_directory",
          "label": "H2 Database Directory",
          "description": "The path to the database directory",
          "configName": "nifi.database.directory",
          "required": true,
          "type": "path",
          "conformRegex": "/.*",
          "pathType": "localDataDir",
          "mode": "0750",
          "default": "/data/nifi/database"
        },
        {
          "name": "nifi_database_h2_url",
          "label": "H2 URL Append Options",
          "description": "Options to append to H2's connect string",
          "configName": "nifi.h2.url.append",
          "required": true,
          "type": "string",
          "default": ";LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE"
        },
        {
          "name": "nifi_security_user_authorizer",
          "label": "Security User Authorizer",
          "description": "The identififer of the desired authorizer in authorizers.xml (or safety valve).",
          "configName": "nifi.security.user.authorizer",
          "required": true,
          "type": "string",
          "default": "managed-authorizer"
        },
        {
          "name": "nifi_security_user_login_identity_provider",
          "label": "Security User Login Identity Provider",
          "description": "The identififer of the desired Login Identity Provider in login-identity-provider.xml (or safety valve).",
          "configName": "nifi.security.user.login.identity.provider",
          "required": false,
          "type": "string",
          "conformRegex": "kerberos-provider|"
        },
        {
          "name": "nifi_flowfile_repository_implementation",
          "label": "FlowFile Repository Implementation",
          "description": "The FlowFile Repository implementation. The default value is org.apache.nifi.controller.repository.WriteAheadFlowFileRepository and should only be changed with caution. To store flowfiles in memory instead of on disk (at the risk of data loss in the event of power/machine failure), set this property to org.apache.nifi.controller.repository.VolatileFlowFileRepository.",
          "configName": "nifi.flowfile.repository.implementation",
          "required": true,
          "type": "string",
          "default": "org.apache.nifi.controller.repository.WriteAheadFlowFileRepository"
        },
        {
          "name": "nifi_flowfile_repository_directory",
          "label": "FlowFile Respository Directory",
          "description": "The location of the FlowFile Repository.",
          "configName": "nifi.flowfile.repository.directory",
          "required": true,
          "type": "path",
          "conformRegex": "/.*",
          "pathType": "localDataDir",
          "mode": "0750",
          "default": "/data/nifi/flowfile"
        },
        {
          "name": "nifi_flowfile_repository_partitions",
          "label": "FlowFile Respository Number of Partitions",
          "description": "The number of partitions",
          "configName": "nifi.flowfile.repository.partitions",
          "type": "long",
          "min": 1,
          "default": 256
        },
        {
          "name": "nifi_flowfile_repository_checkpoint_interval",
          "label": "FlowFile Repository Checkpoint Interval",
          "description": "The FlowFile Repository checkpoint interval.",
          "type": "long",
          "unit": "minutes",
          "min": 1,
          "default": 2
        },
        {
          "name": "nifi_flowfile_repository_always_sync",
          "label": "FlowFile Repository Always Sync",
          "description": "If set to true, any change to the repository will be synchronized to the disk, meaning that NiFi will ask the operating system not to cache the information. This is very expensive and can significantly reduce NiFi performance. However, if it is false, there could be the potential for data loss if either there is a sudden power loss or the operating system crashes.",
           "configName": "nifi.flowfile.repository.always.sync",
           "type": "boolean",
           "default": "false"
        },
        {
          "name": "nifi_swap_queue_threshold",
          "label": "Queue Swap Threshold",
          "description": "The queue threshold at which NiFi starts to swap FlowFile information to disk.",
          "configName": "nifi.queue.swap.threshold",
          "type": "long",
          "min": 1,
          "default": 20000
        },
        {
          "name": "nifi_swap_in_period",
          "label": "Swap in period",
          "description": "The swap in period.",
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "default": 5
        },
        {
          "name": "nifi_swap_in_threads",
          "label": "Swap in threads",
          "description": "The number of threads to use for swapping in",
          "configName": "nifi.swap.in.threads",
          "type": "long",
          "min": 1,
          "default": 1
         },
         {
          "name": "nifi_swap_out_period",
          "label": "Swap out period",
          "description": "The swap out period.",
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "default": 5
        },
        {
          "name": "nifi_swap_out_threads",
          "label": "Swap out threads",
          "description": "The number of threads to use for swapping out",
          "configName": "nifi.swap.out.threads",
          "type": "long",
          "min": 1,
          "default": 4
         },
         {
           "name": "nifi_components_status_repository_buffer_size",
           "label": "Components Status Repository Buffer Size",
           "description": "Specifies the buffer size for the Component Status Repository.",
           "configName": "nifi.components.status.repository.buffer.size",
           "type": "long",
           "min": 1,
           "default": 1440
         },
         {
           "name": "nifi_components_status_snapshot_frequency",
           "label": "Components Status Respository Snapshot Frequency",
           "description": "This value indicates how often to present a snapshot of the components' status history.",
           "type": "long",
           "unit": "minutes",
           "min": 1,
           "default": 1
         },
         {
           "name": "nifi_remote_input_host",
           "label": "Site-to-Site Hostname",
           "description": "The host name that will be given out to clients to connect to this NiFi instance for Site-to-Site communication. By default, it is the value from InetAddress.getLocalHost().getHostName(). On UNIX-like operating systems, this is typically the output from the hostname command.",
           "configName": "nifi.remote.input.host",
           "required": false,
           "type": "string"
         },
         {
           "name": "nifi_remote_input_secure",
           "label": "Site-to-Site Use SSL",
           "description": "This indicates whether communication between this instance of NiFi and remote NiFi instances should be secure. By default, it is set to false. In order for secure site-to-site to work, set the property to true. Many other Security Properties (below) must also be configured.",
           "configName": "nifi.remote.input.secure",
           "required": true,
           "type": "boolean",
           "default": false
         },
         {
           "name": "nifi_remote_input_socket_port",
           "label": "Site-to-Site Port Number",
           "description": "The remote input socket port for Site-to-Site communication. By default, it is blank, but it must have a value in order to use RAW socket as transport protocol for Site-to-Site.",
           "configName": "nifi.remote.input.socket.port",
           "required": false,
           "type": "port",
           "min": 1024
         },
         {
           "name": "nifi_remote_input_http_enabled",
           "label": "Site-to-Site HTTP(S) Enabled",
           "description": "Specifies whether HTTP Site-to-Site should be enabled on this host. By default, it is set to true. Whether a Site-to-Site client uses HTTP or HTTPS is determined by nifi.remote.input.secure. If it is set to true, then requests are sent as HTTPS to nifi.web.https.port. If set to false, HTTP requests are sent to nifi.web.http.port.",
           "configName": "nifi.remote.input.http.enabled",
           "required": true,
           "type": "boolean",
           "default": true
         },
         {
           "name": "nifi_remote_input_http_transaction_ttl",
           "label": "Site-to-Site HTTP Transaction TTL",
           "description": "Specifies how long a transaction can stay alive on the server. By default, it is set to 30 secs. If a Site-to-Site client hasn’t proceeded to the next action after this period of time, the transaction is discarded from the remote NiFi instance. For example, when a client creates a transaction but doesn’t send or receive flow files, or when a client sends or receives flow files but doesn’t confirm that transaction.",
           "required": true,
           "type": "long",
           "unit": "seconds",
           "min": 1,
           "default": 30
         },
         {
          "name": "state_management_local_provider_directory",
          "label": "State Management Local Provider Directory",
          "description": "The directory to store components' state in.",
          "configName": "Directory",
          "required": true,
          "configurableInWizard": true,
          "type": "path",
          "conformRegex": "/.*",
          "pathType": "localDataDir",
          "mode": "0750",
          "default": "/var/run/nifi/state/local"
        },
        {
          "name": "state_management_local_provider_always_sync",
          "label": "State Management Local Provider Always Sync",
          "description": "Always Sync - If set to true, any change to the repository will be synchronized to the disk, meaning that NiFi will ask the operating system not to cache the information. This is very expensive and can significantly reduce NiFi performance. However, if it is false, there could be the potential for data loss if either there is a sudden power loss or the operating system crashes. The default value is false.",
          "configName": "Always Sync",
          "required": true,
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "state_management_local_provider_partitions",
          "label": "State Management Local Provider Number of Partitions",
          "description": "The number of partitions.",
          "configName": "Partitions",
          "required": true,
          "type": "long",
          "min": 1,
          "default": 16
        },
        {
          "name": "state_management_local_provider_checkpoint_interval",
          "label": "State Management Local Provider Checkpoint Interval",
          "description": "The amount of time between checkpoints.",
          "required": true,
          "type": "long",
          "unit": "minutes",
          "min": 1,
          "default": 2
        },
        {
          "name": "state_management_zk_provider_root_node",
          "label": "State Management Zookeeper Provider Root Node",
          "description": "The root node in ZooKeeper where state should be stored. The default is '/nifi', but it is advisable to change this to a different value if not using if multiple NiFi instances may all be using the same ZooKeeper Server.",
          "configName": "Root Node",
          "required": true,
          "type": "path",
          "conformRegex": "/.*",
          "pathType": "serviceSpecific",
          "default": "/nifi"
        },
        {
          "name": "state_management_zk_provider_session_timeout",
          "label": "State Management Zookeeper Provider Session Timeout",
          "description": "Specifies how long this instance of NiFi is allowed to be disconnected from ZooKeeper before creating a new ZooKeeper Session.",
          "required": true,
          "type": "long",
          "unit": "seconds",
          "min": 1,
          "softMin": 10,
          "default": 30
        },
        {
          "name": "state_management_zk_provider_access_control",
          "label": "State Management Zookeeper Provider Access Control",
          "description": "Specifies which Access Controls will be applied to the ZooKeeper ZNodes that are created by this State Provider. This value must be set to one of: - Open  : ZNodes will be open to any ZooKeeper client.  - CreatorOnly  : ZNodes will be accessible only by the creator. The creator will have full access to create children, read, write, delete, and administer the ZNodes.  This option is available only if access to ZooKeeper is secured via Kerberos or if a Username and Password are set.",
          "configName": "Access Control",
          "required": true,
          "type": "string",
          "conformRegex": "Open|CreatorOnly",
          "default": "Open"
        }
      ]
    }
  ]
}
